
hidden partial modifier_keys
xkb_symbols "nuc-kinesis" {
    replace key <CAPS> { [ ISO_Next_Group, Caps_Lock ] };
};

hidden partial modifier_keys
xkb_symbols "mycarbon" {
    replace key <CAPS> { [ ISO_Next_Group, Caps_Lock ] };
};

hidden partial modifier_keys
xkb_symbols "mycarbon3" {
    // replace key <CAPS> { [ ISO_Next_Group, ISO_Next_Group, Caps_Lock, Caps_Lock ] };  // this works
    // replace key <CAPS> { [ Escape ] };   // this works
    // replace key <CAPS> { [ Escape, Caps_Lock ] };   // this fails. 
    // replace key <CAPS> { [ Escape, ISO_Next_Group ] };   // this works
    // replace key <CAPS>  { [ ISO_Next_Group, Caps_Lock ] }; // as expected, works perfectly.
    // key <CAPS> {
    //     type[Group1] = "TWO_LEVEL",
    //     symbols[Group1] = [ Escape, Caps_Lock ],
    //     actions[Group1] = [ NoAction(), LockMods(modifiers=Lock) ]
    // };
    key <CAPS> {
        // type[Group1] = "FOUR_LEVEL",
        symbols[Group1] = [ Escape, ISO_Next_Group, Caps_Lock, Caps_Lock ],
        actions[Group1] = [ NoAction(), LockGroup(group=+1), LockMods(modifiers=Lock), LockMods(modifiers=Lock) ]
    };
    // modifier_map Lock { <HYPR> };
};

// Thinkpad 
//  1.  Alt_R -->  Ctrl_R
//  2.  Prt -->  Alt_R
//  3.  Ctrl_R --> W_Command_R i.e. Super_R
//  4.  Chord(P+R)  -->  Print Screen
//  5.  CapsLock --> Win_L , Print
//  6.  ALT_L --> Ctrl_L
//  7.  Win_L -->  Alt_L
//  8.  Ctrl_L --> Win_L 

// Ctrl is mapped to the Alt keys, Alt to the Win keys, and Win to the Ctrl keys.
hidden partial modifier_keys
xkb_symbols "mycarbon2" {
    // Caps Lock becomes Escape, with Caps Lock reachable with Shift if necessary
    key <CAPS> {
        type[Group1] = "FOUR_LEVEL",
        symbols[Group1] = [ Escape, ISO_Next_Group, Caps_Lock, Caps_Lock ],
        actions[Group1] = [ NoAction(), LockGroup(group=+1), LockMods(modifiers=Lock), LockMods(modifiers=Lock) ]
    };
    // Do I need this modifier map here? 
    // modifier_map Lock { Caps_Lock };

    key <LALT> { [ Control_L, Control_L  ] };
    key <RALT> { type[Group1] = "TWO_LEVEL",
                 symbols[Group1] = [ Control_R, Control_R ]
    };
    modifier_map Control { <RALT>, <LALT> };
    // second entry is identical.  

    key <LWIN> { [ Alt_L, Meta_L ] };
    key <PRSC> { type[Group1]="TWO_LEVEL", [ Alt_R, Meta_R] };
    key <RCTL> { [ Alt_R, Meta_R ] };
    modifier_map Mod1 { <LWIN>, <PRSC> };

    key <LCTL> { [ Super_L ] };
    modifier_map Mod4 { <LCTL>};

    // Turn Right Control into AltGr
    replace key <RCTL> {
        type[Group1] = "ONE_LEVEL",
        symbols[Group1] = [ ISO_Level3_Shift ]
    };

    include "level3(modifier_mapping)"
    
    // If I never end up using RCTL (small, hard for pinky to find) then turn it into AltGr
    // If I want to get to my next layout to type Â£ I can just use Shift+Capslock. 
    // I can play with second layout to access characters I need more often. 
};

